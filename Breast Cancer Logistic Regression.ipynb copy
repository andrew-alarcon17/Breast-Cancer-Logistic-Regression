{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>diagnosis</th>\n",
       "      <th>radius_mean</th>\n",
       "      <th>texture_mean</th>\n",
       "      <th>perimeter_mean</th>\n",
       "      <th>area_mean</th>\n",
       "      <th>smoothness_mean</th>\n",
       "      <th>compactness_mean</th>\n",
       "      <th>concavity_mean</th>\n",
       "      <th>concave points_mean</th>\n",
       "      <th>...</th>\n",
       "      <th>texture_worst</th>\n",
       "      <th>perimeter_worst</th>\n",
       "      <th>area_worst</th>\n",
       "      <th>smoothness_worst</th>\n",
       "      <th>compactness_worst</th>\n",
       "      <th>concavity_worst</th>\n",
       "      <th>concave points_worst</th>\n",
       "      <th>symmetry_worst</th>\n",
       "      <th>fractal_dimension_worst</th>\n",
       "      <th>Unnamed: 32</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>842302</td>\n",
       "      <td>M</td>\n",
       "      <td>17.99</td>\n",
       "      <td>10.38</td>\n",
       "      <td>122.80</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>0.11840</td>\n",
       "      <td>0.27760</td>\n",
       "      <td>0.3001</td>\n",
       "      <td>0.14710</td>\n",
       "      <td>...</td>\n",
       "      <td>17.33</td>\n",
       "      <td>184.60</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>0.1622</td>\n",
       "      <td>0.6656</td>\n",
       "      <td>0.7119</td>\n",
       "      <td>0.2654</td>\n",
       "      <td>0.4601</td>\n",
       "      <td>0.11890</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>842517</td>\n",
       "      <td>M</td>\n",
       "      <td>20.57</td>\n",
       "      <td>17.77</td>\n",
       "      <td>132.90</td>\n",
       "      <td>1326.0</td>\n",
       "      <td>0.08474</td>\n",
       "      <td>0.07864</td>\n",
       "      <td>0.0869</td>\n",
       "      <td>0.07017</td>\n",
       "      <td>...</td>\n",
       "      <td>23.41</td>\n",
       "      <td>158.80</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>0.1238</td>\n",
       "      <td>0.1866</td>\n",
       "      <td>0.2416</td>\n",
       "      <td>0.1860</td>\n",
       "      <td>0.2750</td>\n",
       "      <td>0.08902</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>84300903</td>\n",
       "      <td>M</td>\n",
       "      <td>19.69</td>\n",
       "      <td>21.25</td>\n",
       "      <td>130.00</td>\n",
       "      <td>1203.0</td>\n",
       "      <td>0.10960</td>\n",
       "      <td>0.15990</td>\n",
       "      <td>0.1974</td>\n",
       "      <td>0.12790</td>\n",
       "      <td>...</td>\n",
       "      <td>25.53</td>\n",
       "      <td>152.50</td>\n",
       "      <td>1709.0</td>\n",
       "      <td>0.1444</td>\n",
       "      <td>0.4245</td>\n",
       "      <td>0.4504</td>\n",
       "      <td>0.2430</td>\n",
       "      <td>0.3613</td>\n",
       "      <td>0.08758</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>84348301</td>\n",
       "      <td>M</td>\n",
       "      <td>11.42</td>\n",
       "      <td>20.38</td>\n",
       "      <td>77.58</td>\n",
       "      <td>386.1</td>\n",
       "      <td>0.14250</td>\n",
       "      <td>0.28390</td>\n",
       "      <td>0.2414</td>\n",
       "      <td>0.10520</td>\n",
       "      <td>...</td>\n",
       "      <td>26.50</td>\n",
       "      <td>98.87</td>\n",
       "      <td>567.7</td>\n",
       "      <td>0.2098</td>\n",
       "      <td>0.8663</td>\n",
       "      <td>0.6869</td>\n",
       "      <td>0.2575</td>\n",
       "      <td>0.6638</td>\n",
       "      <td>0.17300</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>84358402</td>\n",
       "      <td>M</td>\n",
       "      <td>20.29</td>\n",
       "      <td>14.34</td>\n",
       "      <td>135.10</td>\n",
       "      <td>1297.0</td>\n",
       "      <td>0.10030</td>\n",
       "      <td>0.13280</td>\n",
       "      <td>0.1980</td>\n",
       "      <td>0.10430</td>\n",
       "      <td>...</td>\n",
       "      <td>16.67</td>\n",
       "      <td>152.20</td>\n",
       "      <td>1575.0</td>\n",
       "      <td>0.1374</td>\n",
       "      <td>0.2050</td>\n",
       "      <td>0.4000</td>\n",
       "      <td>0.1625</td>\n",
       "      <td>0.2364</td>\n",
       "      <td>0.07678</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 33 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         id diagnosis  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n",
       "0    842302         M        17.99         10.38          122.80     1001.0   \n",
       "1    842517         M        20.57         17.77          132.90     1326.0   \n",
       "2  84300903         M        19.69         21.25          130.00     1203.0   \n",
       "3  84348301         M        11.42         20.38           77.58      386.1   \n",
       "4  84358402         M        20.29         14.34          135.10     1297.0   \n",
       "\n",
       "   smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n",
       "0          0.11840           0.27760          0.3001              0.14710   \n",
       "1          0.08474           0.07864          0.0869              0.07017   \n",
       "2          0.10960           0.15990          0.1974              0.12790   \n",
       "3          0.14250           0.28390          0.2414              0.10520   \n",
       "4          0.10030           0.13280          0.1980              0.10430   \n",
       "\n",
       "   ...  texture_worst  perimeter_worst  area_worst  smoothness_worst  \\\n",
       "0  ...          17.33           184.60      2019.0            0.1622   \n",
       "1  ...          23.41           158.80      1956.0            0.1238   \n",
       "2  ...          25.53           152.50      1709.0            0.1444   \n",
       "3  ...          26.50            98.87       567.7            0.2098   \n",
       "4  ...          16.67           152.20      1575.0            0.1374   \n",
       "\n",
       "   compactness_worst  concavity_worst  concave points_worst  symmetry_worst  \\\n",
       "0             0.6656           0.7119                0.2654          0.4601   \n",
       "1             0.1866           0.2416                0.1860          0.2750   \n",
       "2             0.4245           0.4504                0.2430          0.3613   \n",
       "3             0.8663           0.6869                0.2575          0.6638   \n",
       "4             0.2050           0.4000                0.1625          0.2364   \n",
       "\n",
       "   fractal_dimension_worst  Unnamed: 32  \n",
       "0                  0.11890          NaN  \n",
       "1                  0.08902          NaN  \n",
       "2                  0.08758          NaN  \n",
       "3                  0.17300          NaN  \n",
       "4                  0.07678          NaN  \n",
       "\n",
       "[5 rows x 33 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('data_1.csv')\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's create a new array of values called targets. This column will be the numerical equivalent to the diagnosis column, where M=1 and B=0.\n",
    "\n",
    "We will then replace the diagnosis column with an updated version with the values of targets."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,\n",
       "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1,\n",
       "       0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1,\n",
       "       0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1,\n",
       "       1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n",
       "       0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0,\n",
       "       0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1,\n",
       "       1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1,\n",
       "       0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0,\n",
       "       0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
       "       1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "targets = np.where(df['diagnosis'] == 'M', 1, 0)\n",
    "targets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['Diagnosis'] = targets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop(['id'], axis=1)\n",
    "df = df.drop(['Unnamed: 32'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>diagnosis</th>\n",
       "      <th>radius_mean</th>\n",
       "      <th>texture_mean</th>\n",
       "      <th>perimeter_mean</th>\n",
       "      <th>area_mean</th>\n",
       "      <th>smoothness_mean</th>\n",
       "      <th>compactness_mean</th>\n",
       "      <th>concavity_mean</th>\n",
       "      <th>concave points_mean</th>\n",
       "      <th>symmetry_mean</th>\n",
       "      <th>...</th>\n",
       "      <th>texture_worst</th>\n",
       "      <th>perimeter_worst</th>\n",
       "      <th>area_worst</th>\n",
       "      <th>smoothness_worst</th>\n",
       "      <th>compactness_worst</th>\n",
       "      <th>concavity_worst</th>\n",
       "      <th>concave points_worst</th>\n",
       "      <th>symmetry_worst</th>\n",
       "      <th>fractal_dimension_worst</th>\n",
       "      <th>Diagnosis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>M</td>\n",
       "      <td>17.99</td>\n",
       "      <td>10.38</td>\n",
       "      <td>122.80</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>0.11840</td>\n",
       "      <td>0.27760</td>\n",
       "      <td>0.3001</td>\n",
       "      <td>0.14710</td>\n",
       "      <td>0.2419</td>\n",
       "      <td>...</td>\n",
       "      <td>17.33</td>\n",
       "      <td>184.60</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>0.1622</td>\n",
       "      <td>0.6656</td>\n",
       "      <td>0.7119</td>\n",
       "      <td>0.2654</td>\n",
       "      <td>0.4601</td>\n",
       "      <td>0.11890</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>M</td>\n",
       "      <td>20.57</td>\n",
       "      <td>17.77</td>\n",
       "      <td>132.90</td>\n",
       "      <td>1326.0</td>\n",
       "      <td>0.08474</td>\n",
       "      <td>0.07864</td>\n",
       "      <td>0.0869</td>\n",
       "      <td>0.07017</td>\n",
       "      <td>0.1812</td>\n",
       "      <td>...</td>\n",
       "      <td>23.41</td>\n",
       "      <td>158.80</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>0.1238</td>\n",
       "      <td>0.1866</td>\n",
       "      <td>0.2416</td>\n",
       "      <td>0.1860</td>\n",
       "      <td>0.2750</td>\n",
       "      <td>0.08902</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>M</td>\n",
       "      <td>19.69</td>\n",
       "      <td>21.25</td>\n",
       "      <td>130.00</td>\n",
       "      <td>1203.0</td>\n",
       "      <td>0.10960</td>\n",
       "      <td>0.15990</td>\n",
       "      <td>0.1974</td>\n",
       "      <td>0.12790</td>\n",
       "      <td>0.2069</td>\n",
       "      <td>...</td>\n",
       "      <td>25.53</td>\n",
       "      <td>152.50</td>\n",
       "      <td>1709.0</td>\n",
       "      <td>0.1444</td>\n",
       "      <td>0.4245</td>\n",
       "      <td>0.4504</td>\n",
       "      <td>0.2430</td>\n",
       "      <td>0.3613</td>\n",
       "      <td>0.08758</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>M</td>\n",
       "      <td>11.42</td>\n",
       "      <td>20.38</td>\n",
       "      <td>77.58</td>\n",
       "      <td>386.1</td>\n",
       "      <td>0.14250</td>\n",
       "      <td>0.28390</td>\n",
       "      <td>0.2414</td>\n",
       "      <td>0.10520</td>\n",
       "      <td>0.2597</td>\n",
       "      <td>...</td>\n",
       "      <td>26.50</td>\n",
       "      <td>98.87</td>\n",
       "      <td>567.7</td>\n",
       "      <td>0.2098</td>\n",
       "      <td>0.8663</td>\n",
       "      <td>0.6869</td>\n",
       "      <td>0.2575</td>\n",
       "      <td>0.6638</td>\n",
       "      <td>0.17300</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>M</td>\n",
       "      <td>20.29</td>\n",
       "      <td>14.34</td>\n",
       "      <td>135.10</td>\n",
       "      <td>1297.0</td>\n",
       "      <td>0.10030</td>\n",
       "      <td>0.13280</td>\n",
       "      <td>0.1980</td>\n",
       "      <td>0.10430</td>\n",
       "      <td>0.1809</td>\n",
       "      <td>...</td>\n",
       "      <td>16.67</td>\n",
       "      <td>152.20</td>\n",
       "      <td>1575.0</td>\n",
       "      <td>0.1374</td>\n",
       "      <td>0.2050</td>\n",
       "      <td>0.4000</td>\n",
       "      <td>0.1625</td>\n",
       "      <td>0.2364</td>\n",
       "      <td>0.07678</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  diagnosis  radius_mean  texture_mean  perimeter_mean  area_mean  \\\n",
       "0         M        17.99         10.38          122.80     1001.0   \n",
       "1         M        20.57         17.77          132.90     1326.0   \n",
       "2         M        19.69         21.25          130.00     1203.0   \n",
       "3         M        11.42         20.38           77.58      386.1   \n",
       "4         M        20.29         14.34          135.10     1297.0   \n",
       "\n",
       "   smoothness_mean  compactness_mean  concavity_mean  concave points_mean  \\\n",
       "0          0.11840           0.27760          0.3001              0.14710   \n",
       "1          0.08474           0.07864          0.0869              0.07017   \n",
       "2          0.10960           0.15990          0.1974              0.12790   \n",
       "3          0.14250           0.28390          0.2414              0.10520   \n",
       "4          0.10030           0.13280          0.1980              0.10430   \n",
       "\n",
       "   symmetry_mean  ...  texture_worst  perimeter_worst  area_worst  \\\n",
       "0         0.2419  ...          17.33           184.60      2019.0   \n",
       "1         0.1812  ...          23.41           158.80      1956.0   \n",
       "2         0.2069  ...          25.53           152.50      1709.0   \n",
       "3         0.2597  ...          26.50            98.87       567.7   \n",
       "4         0.1809  ...          16.67           152.20      1575.0   \n",
       "\n",
       "   smoothness_worst  compactness_worst  concavity_worst  concave points_worst  \\\n",
       "0            0.1622             0.6656           0.7119                0.2654   \n",
       "1            0.1238             0.1866           0.2416                0.1860   \n",
       "2            0.1444             0.4245           0.4504                0.2430   \n",
       "3            0.2098             0.8663           0.6869                0.2575   \n",
       "4            0.1374             0.2050           0.4000                0.1625   \n",
       "\n",
       "   symmetry_worst  fractal_dimension_worst  Diagnosis  \n",
       "0          0.4601                  0.11890          1  \n",
       "1          0.2750                  0.08902          1  \n",
       "2          0.3613                  0.08758          1  \n",
       "3          0.6638                  0.17300          1  \n",
       "4          0.2364                  0.07678          1  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5087719298245614"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "targets.sum() / targets.shape[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From this number, it looks like around 51% of the targets are malignant."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_targets = df.drop(['diagnosis'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(285, 31)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_targets.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df_targets.iloc[:,:-1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For predicting later on, we will have to standardize our data. Let's create a new variable called unscaled_inputs, which is equal to df_targets, without its last column 'Diagnosis'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "unscaled_inputs = df_targets.iloc[:,:-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>radius_mean</th>\n",
       "      <th>texture_mean</th>\n",
       "      <th>perimeter_mean</th>\n",
       "      <th>area_mean</th>\n",
       "      <th>smoothness_mean</th>\n",
       "      <th>compactness_mean</th>\n",
       "      <th>concavity_mean</th>\n",
       "      <th>concave points_mean</th>\n",
       "      <th>symmetry_mean</th>\n",
       "      <th>fractal_dimension_mean</th>\n",
       "      <th>...</th>\n",
       "      <th>radius_worst</th>\n",
       "      <th>texture_worst</th>\n",
       "      <th>perimeter_worst</th>\n",
       "      <th>area_worst</th>\n",
       "      <th>smoothness_worst</th>\n",
       "      <th>compactness_worst</th>\n",
       "      <th>concavity_worst</th>\n",
       "      <th>concave points_worst</th>\n",
       "      <th>symmetry_worst</th>\n",
       "      <th>fractal_dimension_worst</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17.99</td>\n",
       "      <td>10.38</td>\n",
       "      <td>122.80</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>0.11840</td>\n",
       "      <td>0.27760</td>\n",
       "      <td>0.30010</td>\n",
       "      <td>0.14710</td>\n",
       "      <td>0.2419</td>\n",
       "      <td>0.07871</td>\n",
       "      <td>...</td>\n",
       "      <td>25.38</td>\n",
       "      <td>17.33</td>\n",
       "      <td>184.60</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>0.16220</td>\n",
       "      <td>0.6656</td>\n",
       "      <td>0.71190</td>\n",
       "      <td>0.2654</td>\n",
       "      <td>0.4601</td>\n",
       "      <td>0.11890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20.57</td>\n",
       "      <td>17.77</td>\n",
       "      <td>132.90</td>\n",
       "      <td>1326.0</td>\n",
       "      <td>0.08474</td>\n",
       "      <td>0.07864</td>\n",
       "      <td>0.08690</td>\n",
       "      <td>0.07017</td>\n",
       "      <td>0.1812</td>\n",
       "      <td>0.05667</td>\n",
       "      <td>...</td>\n",
       "      <td>24.99</td>\n",
       "      <td>23.41</td>\n",
       "      <td>158.80</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>0.12380</td>\n",
       "      <td>0.1866</td>\n",
       "      <td>0.24160</td>\n",
       "      <td>0.1860</td>\n",
       "      <td>0.2750</td>\n",
       "      <td>0.08902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.69</td>\n",
       "      <td>21.25</td>\n",
       "      <td>130.00</td>\n",
       "      <td>1203.0</td>\n",
       "      <td>0.10960</td>\n",
       "      <td>0.15990</td>\n",
       "      <td>0.19740</td>\n",
       "      <td>0.12790</td>\n",
       "      <td>0.2069</td>\n",
       "      <td>0.05999</td>\n",
       "      <td>...</td>\n",
       "      <td>23.57</td>\n",
       "      <td>25.53</td>\n",
       "      <td>152.50</td>\n",
       "      <td>1709.0</td>\n",
       "      <td>0.14440</td>\n",
       "      <td>0.4245</td>\n",
       "      <td>0.45040</td>\n",
       "      <td>0.2430</td>\n",
       "      <td>0.3613</td>\n",
       "      <td>0.08758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.42</td>\n",
       "      <td>20.38</td>\n",
       "      <td>77.58</td>\n",
       "      <td>386.1</td>\n",
       "      <td>0.14250</td>\n",
       "      <td>0.28390</td>\n",
       "      <td>0.24140</td>\n",
       "      <td>0.10520</td>\n",
       "      <td>0.2597</td>\n",
       "      <td>0.09744</td>\n",
       "      <td>...</td>\n",
       "      <td>14.91</td>\n",
       "      <td>26.50</td>\n",
       "      <td>98.87</td>\n",
       "      <td>567.7</td>\n",
       "      <td>0.20980</td>\n",
       "      <td>0.8663</td>\n",
       "      <td>0.68690</td>\n",
       "      <td>0.2575</td>\n",
       "      <td>0.6638</td>\n",
       "      <td>0.17300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20.29</td>\n",
       "      <td>14.34</td>\n",
       "      <td>135.10</td>\n",
       "      <td>1297.0</td>\n",
       "      <td>0.10030</td>\n",
       "      <td>0.13280</td>\n",
       "      <td>0.19800</td>\n",
       "      <td>0.10430</td>\n",
       "      <td>0.1809</td>\n",
       "      <td>0.05883</td>\n",
       "      <td>...</td>\n",
       "      <td>22.54</td>\n",
       "      <td>16.67</td>\n",
       "      <td>152.20</td>\n",
       "      <td>1575.0</td>\n",
       "      <td>0.13740</td>\n",
       "      <td>0.2050</td>\n",
       "      <td>0.40000</td>\n",
       "      <td>0.1625</td>\n",
       "      <td>0.2364</td>\n",
       "      <td>0.07678</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>280</th>\n",
       "      <td>19.16</td>\n",
       "      <td>26.60</td>\n",
       "      <td>126.20</td>\n",
       "      <td>1138.0</td>\n",
       "      <td>0.10200</td>\n",
       "      <td>0.14530</td>\n",
       "      <td>0.19210</td>\n",
       "      <td>0.09664</td>\n",
       "      <td>0.1902</td>\n",
       "      <td>0.06220</td>\n",
       "      <td>...</td>\n",
       "      <td>23.72</td>\n",
       "      <td>35.90</td>\n",
       "      <td>159.80</td>\n",
       "      <td>1724.0</td>\n",
       "      <td>0.17820</td>\n",
       "      <td>0.3841</td>\n",
       "      <td>0.57540</td>\n",
       "      <td>0.1872</td>\n",
       "      <td>0.3258</td>\n",
       "      <td>0.09720</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>281</th>\n",
       "      <td>11.74</td>\n",
       "      <td>14.02</td>\n",
       "      <td>74.24</td>\n",
       "      <td>427.3</td>\n",
       "      <td>0.07813</td>\n",
       "      <td>0.04340</td>\n",
       "      <td>0.02245</td>\n",
       "      <td>0.02763</td>\n",
       "      <td>0.2101</td>\n",
       "      <td>0.06113</td>\n",
       "      <td>...</td>\n",
       "      <td>13.31</td>\n",
       "      <td>18.26</td>\n",
       "      <td>84.70</td>\n",
       "      <td>533.7</td>\n",
       "      <td>0.10360</td>\n",
       "      <td>0.0850</td>\n",
       "      <td>0.06735</td>\n",
       "      <td>0.0829</td>\n",
       "      <td>0.3101</td>\n",
       "      <td>0.06688</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>282</th>\n",
       "      <td>19.40</td>\n",
       "      <td>18.18</td>\n",
       "      <td>127.20</td>\n",
       "      <td>1145.0</td>\n",
       "      <td>0.10370</td>\n",
       "      <td>0.14420</td>\n",
       "      <td>0.16260</td>\n",
       "      <td>0.09464</td>\n",
       "      <td>0.1893</td>\n",
       "      <td>0.05892</td>\n",
       "      <td>...</td>\n",
       "      <td>23.79</td>\n",
       "      <td>28.65</td>\n",
       "      <td>152.40</td>\n",
       "      <td>1628.0</td>\n",
       "      <td>0.15180</td>\n",
       "      <td>0.3749</td>\n",
       "      <td>0.43160</td>\n",
       "      <td>0.2252</td>\n",
       "      <td>0.3590</td>\n",
       "      <td>0.07787</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>283</th>\n",
       "      <td>16.24</td>\n",
       "      <td>18.77</td>\n",
       "      <td>108.80</td>\n",
       "      <td>805.1</td>\n",
       "      <td>0.10660</td>\n",
       "      <td>0.18020</td>\n",
       "      <td>0.19480</td>\n",
       "      <td>0.09052</td>\n",
       "      <td>0.1876</td>\n",
       "      <td>0.06684</td>\n",
       "      <td>...</td>\n",
       "      <td>18.55</td>\n",
       "      <td>25.09</td>\n",
       "      <td>126.90</td>\n",
       "      <td>1031.0</td>\n",
       "      <td>0.13650</td>\n",
       "      <td>0.4706</td>\n",
       "      <td>0.50260</td>\n",
       "      <td>0.1732</td>\n",
       "      <td>0.2770</td>\n",
       "      <td>0.10630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>284</th>\n",
       "      <td>12.89</td>\n",
       "      <td>15.70</td>\n",
       "      <td>84.08</td>\n",
       "      <td>516.6</td>\n",
       "      <td>0.07818</td>\n",
       "      <td>0.09580</td>\n",
       "      <td>0.11150</td>\n",
       "      <td>0.03390</td>\n",
       "      <td>0.1432</td>\n",
       "      <td>0.05935</td>\n",
       "      <td>...</td>\n",
       "      <td>13.90</td>\n",
       "      <td>19.69</td>\n",
       "      <td>92.12</td>\n",
       "      <td>595.6</td>\n",
       "      <td>0.09926</td>\n",
       "      <td>0.2317</td>\n",
       "      <td>0.33440</td>\n",
       "      <td>0.1017</td>\n",
       "      <td>0.1999</td>\n",
       "      <td>0.07127</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>285 rows Ã— 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     radius_mean  texture_mean  perimeter_mean  area_mean  smoothness_mean  \\\n",
       "0          17.99         10.38          122.80     1001.0          0.11840   \n",
       "1          20.57         17.77          132.90     1326.0          0.08474   \n",
       "2          19.69         21.25          130.00     1203.0          0.10960   \n",
       "3          11.42         20.38           77.58      386.1          0.14250   \n",
       "4          20.29         14.34          135.10     1297.0          0.10030   \n",
       "..           ...           ...             ...        ...              ...   \n",
       "280        19.16         26.60          126.20     1138.0          0.10200   \n",
       "281        11.74         14.02           74.24      427.3          0.07813   \n",
       "282        19.40         18.18          127.20     1145.0          0.10370   \n",
       "283        16.24         18.77          108.80      805.1          0.10660   \n",
       "284        12.89         15.70           84.08      516.6          0.07818   \n",
       "\n",
       "     compactness_mean  concavity_mean  concave points_mean  symmetry_mean  \\\n",
       "0             0.27760         0.30010              0.14710         0.2419   \n",
       "1             0.07864         0.08690              0.07017         0.1812   \n",
       "2             0.15990         0.19740              0.12790         0.2069   \n",
       "3             0.28390         0.24140              0.10520         0.2597   \n",
       "4             0.13280         0.19800              0.10430         0.1809   \n",
       "..                ...             ...                  ...            ...   \n",
       "280           0.14530         0.19210              0.09664         0.1902   \n",
       "281           0.04340         0.02245              0.02763         0.2101   \n",
       "282           0.14420         0.16260              0.09464         0.1893   \n",
       "283           0.18020         0.19480              0.09052         0.1876   \n",
       "284           0.09580         0.11150              0.03390         0.1432   \n",
       "\n",
       "     fractal_dimension_mean  ...  radius_worst  texture_worst  \\\n",
       "0                   0.07871  ...         25.38          17.33   \n",
       "1                   0.05667  ...         24.99          23.41   \n",
       "2                   0.05999  ...         23.57          25.53   \n",
       "3                   0.09744  ...         14.91          26.50   \n",
       "4                   0.05883  ...         22.54          16.67   \n",
       "..                      ...  ...           ...            ...   \n",
       "280                 0.06220  ...         23.72          35.90   \n",
       "281                 0.06113  ...         13.31          18.26   \n",
       "282                 0.05892  ...         23.79          28.65   \n",
       "283                 0.06684  ...         18.55          25.09   \n",
       "284                 0.05935  ...         13.90          19.69   \n",
       "\n",
       "     perimeter_worst  area_worst  smoothness_worst  compactness_worst  \\\n",
       "0             184.60      2019.0           0.16220             0.6656   \n",
       "1             158.80      1956.0           0.12380             0.1866   \n",
       "2             152.50      1709.0           0.14440             0.4245   \n",
       "3              98.87       567.7           0.20980             0.8663   \n",
       "4             152.20      1575.0           0.13740             0.2050   \n",
       "..               ...         ...               ...                ...   \n",
       "280           159.80      1724.0           0.17820             0.3841   \n",
       "281            84.70       533.7           0.10360             0.0850   \n",
       "282           152.40      1628.0           0.15180             0.3749   \n",
       "283           126.90      1031.0           0.13650             0.4706   \n",
       "284            92.12       595.6           0.09926             0.2317   \n",
       "\n",
       "     concavity_worst  concave points_worst  symmetry_worst  \\\n",
       "0            0.71190                0.2654          0.4601   \n",
       "1            0.24160                0.1860          0.2750   \n",
       "2            0.45040                0.2430          0.3613   \n",
       "3            0.68690                0.2575          0.6638   \n",
       "4            0.40000                0.1625          0.2364   \n",
       "..               ...                   ...             ...   \n",
       "280          0.57540                0.1872          0.3258   \n",
       "281          0.06735                0.0829          0.3101   \n",
       "282          0.43160                0.2252          0.3590   \n",
       "283          0.50260                0.1732          0.2770   \n",
       "284          0.33440                0.1017          0.1999   \n",
       "\n",
       "     fractal_dimension_worst  \n",
       "0                    0.11890  \n",
       "1                    0.08902  \n",
       "2                    0.08758  \n",
       "3                    0.17300  \n",
       "4                    0.07678  \n",
       "..                       ...  \n",
       "280                  0.09720  \n",
       "281                  0.06688  \n",
       "282                  0.07787  \n",
       "283                  0.10630  \n",
       "284                  0.07127  \n",
       "\n",
       "[285 rows x 30 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "unscaled_inputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Standardize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.base import BaseEstimator, TransformerMixin\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "class CustomScaler(BaseEstimator, TransformerMixin):\n",
    "    \n",
    "    def __init__(self, columns, copy=True,with_mean=True,with_std=True):\n",
    "        self.scaler = StandardScaler(copy,with_mean,with_std)\n",
    "        self.columns = columns\n",
    "        self.mean_ = None\n",
    "        self.var_ = None\n",
    "        \n",
    "    def fit(self, X, y=None):\n",
    "        self.scaler.fit(X[self.columns], y)\n",
    "        self.mean_ = np.mean(X[self.columns])\n",
    "        self.var_ = np.var(X[self.columns])\n",
    "        return self\n",
    "    \n",
    "    def transform(self, X, y=None, copy=None):\n",
    "        init_col_order = X.columns\n",
    "        X_scaled = pd.DataFrame(self.scaler.transform(X[self.columns]), columns=self.columns)\n",
    "        X_not_scaled = X.loc[:, ~X.columns.isin(self.columns)]\n",
    "        return pd.concat([X_not_scaled, X_scaled], axis=1)[init_col_order]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "preprocessed_data = unscaled_inputs.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Creating a copy of the unscaled_inputs so we can use it later to create a new dataframe containing all the unscaled values with a prediction column of malignant or benign at the end."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['radius_mean', 'texture_mean', 'perimeter_mean', 'area_mean',\n",
       "       'smoothness_mean', 'compactness_mean', 'concavity_mean',\n",
       "       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean',\n",
       "       'radius_se', 'texture_se', 'perimeter_se', 'area_se',\n",
       "       'smoothness_se', 'compactness_se', 'concavity_se',\n",
       "       'concave points_se', 'symmetry_se', 'fractal_dimension_se',\n",
       "       'radius_worst', 'texture_worst', 'perimeter_worst', 'area_worst',\n",
       "       'smoothness_worst', 'compactness_worst', 'concavity_worst',\n",
       "       'concave points_worst', 'symmetry_worst',\n",
       "       'fractal_dimension_worst'], dtype=object)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "unscaled_inputs.columns.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "disease_scaler = CustomScaler(unscaled_inputs.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CustomScaler(columns=Index(['radius_mean', 'texture_mean', 'perimeter_mean', 'area_mean',\n",
      "       'smoothness_mean', 'compactness_mean', 'concavity_mean',\n",
      "       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean',\n",
      "       'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se',\n",
      "       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',\n",
      "       'fractal_dimension_se', 'radius_worst', 'texture_worst',\n",
      "       'perimeter_worst', 'area_worst', 'smoothness_worst',\n",
      "       'compactness_worst', 'concavity_worst', 'concave points_worst',\n",
      "       'symmetry_worst', 'fractal_dimension_worst'],\n",
      "      dtype='object'),\n",
      "             copy=None, with_mean=None, with_std=None)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/base.py:197: FutureWarning: From version 0.24, get_params will raise an AttributeError if a parameter cannot be retrieved as an instance attribute. Previously it would return None.\n",
      "  FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "print(disease_scaler)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The scaler is used to subtract the mean and divide by the standard deviation featurewise."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/base.py:197: FutureWarning: From version 0.24, get_params will raise an AttributeError if a parameter cannot be retrieved as an instance attribute. Previously it would return None.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "CustomScaler(columns=Index(['radius_mean', 'texture_mean', 'perimeter_mean', 'area_mean',\n",
       "       'smoothness_mean', 'compactness_mean', 'concavity_mean',\n",
       "       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean',\n",
       "       'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se',\n",
       "       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',\n",
       "       'fractal_dimension_se', 'radius_worst', 'texture_worst',\n",
       "       'perimeter_worst', 'area_worst', 'smoothness_worst',\n",
       "       'compactness_worst', 'concavity_worst', 'concave points_worst',\n",
       "       'symmetry_worst', 'fractal_dimension_worst'],\n",
       "      dtype='object'),\n",
       "             copy=None, with_mean=None, with_std=None)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "disease_scaler.fit(unscaled_inputs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The line above will calculate and store the mean and the standard deviation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "scaled_inputs = disease_scaler.transform(unscaled_inputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>radius_mean</th>\n",
       "      <th>texture_mean</th>\n",
       "      <th>perimeter_mean</th>\n",
       "      <th>area_mean</th>\n",
       "      <th>smoothness_mean</th>\n",
       "      <th>compactness_mean</th>\n",
       "      <th>concavity_mean</th>\n",
       "      <th>concave points_mean</th>\n",
       "      <th>symmetry_mean</th>\n",
       "      <th>fractal_dimension_mean</th>\n",
       "      <th>...</th>\n",
       "      <th>radius_worst</th>\n",
       "      <th>texture_worst</th>\n",
       "      <th>perimeter_worst</th>\n",
       "      <th>area_worst</th>\n",
       "      <th>smoothness_worst</th>\n",
       "      <th>compactness_worst</th>\n",
       "      <th>concavity_worst</th>\n",
       "      <th>concave points_worst</th>\n",
       "      <th>symmetry_worst</th>\n",
       "      <th>fractal_dimension_worst</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.958583</td>\n",
       "      <td>-2.095899</td>\n",
       "      <td>1.122700</td>\n",
       "      <td>0.854065</td>\n",
       "      <td>1.442909</td>\n",
       "      <td>2.905134</td>\n",
       "      <td>2.372534</td>\n",
       "      <td>2.321218</td>\n",
       "      <td>1.938863</td>\n",
       "      <td>2.085982</td>\n",
       "      <td>...</td>\n",
       "      <td>1.689555</td>\n",
       "      <td>-1.375964</td>\n",
       "      <td>2.099076</td>\n",
       "      <td>1.827402</td>\n",
       "      <td>1.102528</td>\n",
       "      <td>2.213490</td>\n",
       "      <td>1.847250</td>\n",
       "      <td>2.066432</td>\n",
       "      <td>2.260107</td>\n",
       "      <td>1.600139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.676053</td>\n",
       "      <td>-0.381896</td>\n",
       "      <td>1.530125</td>\n",
       "      <td>1.757909</td>\n",
       "      <td>-1.002928</td>\n",
       "      <td>-0.600710</td>\n",
       "      <td>-0.190057</td>\n",
       "      <td>0.365742</td>\n",
       "      <td>-0.150811</td>\n",
       "      <td>-0.841671</td>\n",
       "      <td>...</td>\n",
       "      <td>1.610865</td>\n",
       "      <td>-0.422755</td>\n",
       "      <td>1.350019</td>\n",
       "      <td>1.718753</td>\n",
       "      <td>-0.544908</td>\n",
       "      <td>-0.547367</td>\n",
       "      <td>-0.312301</td>\n",
       "      <td>0.878026</td>\n",
       "      <td>-0.387663</td>\n",
       "      <td>0.135065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.431334</td>\n",
       "      <td>0.425239</td>\n",
       "      <td>1.413141</td>\n",
       "      <td>1.415839</td>\n",
       "      <td>0.803474</td>\n",
       "      <td>0.831160</td>\n",
       "      <td>1.138116</td>\n",
       "      <td>1.833175</td>\n",
       "      <td>0.733944</td>\n",
       "      <td>-0.400663</td>\n",
       "      <td>...</td>\n",
       "      <td>1.324350</td>\n",
       "      <td>-0.090386</td>\n",
       "      <td>1.167110</td>\n",
       "      <td>1.292778</td>\n",
       "      <td>0.338873</td>\n",
       "      <td>0.823839</td>\n",
       "      <td>0.646479</td>\n",
       "      <td>1.731164</td>\n",
       "      <td>0.846819</td>\n",
       "      <td>0.064459</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.868464</td>\n",
       "      <td>0.223456</td>\n",
       "      <td>-0.701433</td>\n",
       "      <td>-0.856006</td>\n",
       "      <td>3.194088</td>\n",
       "      <td>3.016145</td>\n",
       "      <td>1.666981</td>\n",
       "      <td>1.256166</td>\n",
       "      <td>2.551650</td>\n",
       "      <td>4.573956</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.422984</td>\n",
       "      <td>0.061688</td>\n",
       "      <td>-0.389941</td>\n",
       "      <td>-0.675498</td>\n",
       "      <td>3.144661</td>\n",
       "      <td>3.370283</td>\n",
       "      <td>1.732453</td>\n",
       "      <td>1.948190</td>\n",
       "      <td>5.173941</td>\n",
       "      <td>4.252768</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.598188</td>\n",
       "      <td>-1.177435</td>\n",
       "      <td>1.618871</td>\n",
       "      <td>1.677258</td>\n",
       "      <td>0.127708</td>\n",
       "      <td>0.353635</td>\n",
       "      <td>1.145327</td>\n",
       "      <td>1.233289</td>\n",
       "      <td>-0.161139</td>\n",
       "      <td>-0.554750</td>\n",
       "      <td>...</td>\n",
       "      <td>1.116526</td>\n",
       "      <td>-1.479437</td>\n",
       "      <td>1.158400</td>\n",
       "      <td>1.061683</td>\n",
       "      <td>0.038559</td>\n",
       "      <td>-0.441314</td>\n",
       "      <td>0.415050</td>\n",
       "      <td>0.526294</td>\n",
       "      <td>-0.939818</td>\n",
       "      <td>-0.465086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>280</th>\n",
       "      <td>1.283947</td>\n",
       "      <td>1.666094</td>\n",
       "      <td>1.259853</td>\n",
       "      <td>1.235070</td>\n",
       "      <td>0.251236</td>\n",
       "      <td>0.573896</td>\n",
       "      <td>1.074411</td>\n",
       "      <td>1.038581</td>\n",
       "      <td>0.159025</td>\n",
       "      <td>-0.107101</td>\n",
       "      <td>...</td>\n",
       "      <td>1.354616</td>\n",
       "      <td>1.535399</td>\n",
       "      <td>1.379052</td>\n",
       "      <td>1.318647</td>\n",
       "      <td>1.788959</td>\n",
       "      <td>0.590982</td>\n",
       "      <td>1.220461</td>\n",
       "      <td>0.895987</td>\n",
       "      <td>0.339008</td>\n",
       "      <td>0.536146</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>281</th>\n",
       "      <td>-0.779475</td>\n",
       "      <td>-1.251654</td>\n",
       "      <td>-0.836165</td>\n",
       "      <td>-0.741427</td>\n",
       "      <td>-1.483231</td>\n",
       "      <td>-1.221669</td>\n",
       "      <td>-0.964724</td>\n",
       "      <td>-0.715578</td>\n",
       "      <td>0.844108</td>\n",
       "      <td>-0.249233</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.745818</td>\n",
       "      <td>-1.230161</td>\n",
       "      <td>-0.801342</td>\n",
       "      <td>-0.734135</td>\n",
       "      <td>-1.411527</td>\n",
       "      <td>-1.132969</td>\n",
       "      <td>-1.112432</td>\n",
       "      <td>-0.665106</td>\n",
       "      <td>0.114426</td>\n",
       "      <td>-0.950502</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>282</th>\n",
       "      <td>1.350688</td>\n",
       "      <td>-0.286802</td>\n",
       "      <td>1.300192</td>\n",
       "      <td>1.254537</td>\n",
       "      <td>0.374763</td>\n",
       "      <td>0.554513</td>\n",
       "      <td>0.719831</td>\n",
       "      <td>0.987743</td>\n",
       "      <td>0.128042</td>\n",
       "      <td>-0.542795</td>\n",
       "      <td>...</td>\n",
       "      <td>1.368740</td>\n",
       "      <td>0.398760</td>\n",
       "      <td>1.164206</td>\n",
       "      <td>1.153086</td>\n",
       "      <td>0.656347</td>\n",
       "      <td>0.537955</td>\n",
       "      <td>0.560152</td>\n",
       "      <td>1.464745</td>\n",
       "      <td>0.813918</td>\n",
       "      <td>-0.411641</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>283</th>\n",
       "      <td>0.471926</td>\n",
       "      <td>-0.149961</td>\n",
       "      <td>0.557953</td>\n",
       "      <td>0.309256</td>\n",
       "      <td>0.585485</td>\n",
       "      <td>1.188863</td>\n",
       "      <td>1.106864</td>\n",
       "      <td>0.883017</td>\n",
       "      <td>0.069517</td>\n",
       "      <td>0.509247</td>\n",
       "      <td>...</td>\n",
       "      <td>0.311461</td>\n",
       "      <td>-0.159369</td>\n",
       "      <td>0.423859</td>\n",
       "      <td>0.123505</td>\n",
       "      <td>-0.000053</td>\n",
       "      <td>1.089550</td>\n",
       "      <td>0.886174</td>\n",
       "      <td>0.686444</td>\n",
       "      <td>-0.359054</td>\n",
       "      <td>0.982337</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>284</th>\n",
       "      <td>-0.459673</td>\n",
       "      <td>-0.862002</td>\n",
       "      <td>-0.439229</td>\n",
       "      <td>-0.493078</td>\n",
       "      <td>-1.479597</td>\n",
       "      <td>-0.298336</td>\n",
       "      <td>0.105627</td>\n",
       "      <td>-0.556201</td>\n",
       "      <td>-1.459009</td>\n",
       "      <td>-0.485677</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.626773</td>\n",
       "      <td>-1.005969</td>\n",
       "      <td>-0.585916</td>\n",
       "      <td>-0.627382</td>\n",
       "      <td>-1.597721</td>\n",
       "      <td>-0.287420</td>\n",
       "      <td>0.113824</td>\n",
       "      <td>-0.383720</td>\n",
       "      <td>-1.461934</td>\n",
       "      <td>-0.735252</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>285 rows Ã— 30 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     radius_mean  texture_mean  perimeter_mean  area_mean  smoothness_mean  \\\n",
       "0       0.958583     -2.095899        1.122700   0.854065         1.442909   \n",
       "1       1.676053     -0.381896        1.530125   1.757909        -1.002928   \n",
       "2       1.431334      0.425239        1.413141   1.415839         0.803474   \n",
       "3      -0.868464      0.223456       -0.701433  -0.856006         3.194088   \n",
       "4       1.598188     -1.177435        1.618871   1.677258         0.127708   \n",
       "..           ...           ...             ...        ...              ...   \n",
       "280     1.283947      1.666094        1.259853   1.235070         0.251236   \n",
       "281    -0.779475     -1.251654       -0.836165  -0.741427        -1.483231   \n",
       "282     1.350688     -0.286802        1.300192   1.254537         0.374763   \n",
       "283     0.471926     -0.149961        0.557953   0.309256         0.585485   \n",
       "284    -0.459673     -0.862002       -0.439229  -0.493078        -1.479597   \n",
       "\n",
       "     compactness_mean  concavity_mean  concave points_mean  symmetry_mean  \\\n",
       "0            2.905134        2.372534             2.321218       1.938863   \n",
       "1           -0.600710       -0.190057             0.365742      -0.150811   \n",
       "2            0.831160        1.138116             1.833175       0.733944   \n",
       "3            3.016145        1.666981             1.256166       2.551650   \n",
       "4            0.353635        1.145327             1.233289      -0.161139   \n",
       "..                ...             ...                  ...            ...   \n",
       "280          0.573896        1.074411             1.038581       0.159025   \n",
       "281         -1.221669       -0.964724            -0.715578       0.844108   \n",
       "282          0.554513        0.719831             0.987743       0.128042   \n",
       "283          1.188863        1.106864             0.883017       0.069517   \n",
       "284         -0.298336        0.105627            -0.556201      -1.459009   \n",
       "\n",
       "     fractal_dimension_mean  ...  radius_worst  texture_worst  \\\n",
       "0                  2.085982  ...      1.689555      -1.375964   \n",
       "1                 -0.841671  ...      1.610865      -0.422755   \n",
       "2                 -0.400663  ...      1.324350      -0.090386   \n",
       "3                  4.573956  ...     -0.422984       0.061688   \n",
       "4                 -0.554750  ...      1.116526      -1.479437   \n",
       "..                      ...  ...           ...            ...   \n",
       "280               -0.107101  ...      1.354616       1.535399   \n",
       "281               -0.249233  ...     -0.745818      -1.230161   \n",
       "282               -0.542795  ...      1.368740       0.398760   \n",
       "283                0.509247  ...      0.311461      -0.159369   \n",
       "284               -0.485677  ...     -0.626773      -1.005969   \n",
       "\n",
       "     perimeter_worst  area_worst  smoothness_worst  compactness_worst  \\\n",
       "0           2.099076    1.827402          1.102528           2.213490   \n",
       "1           1.350019    1.718753         -0.544908          -0.547367   \n",
       "2           1.167110    1.292778          0.338873           0.823839   \n",
       "3          -0.389941   -0.675498          3.144661           3.370283   \n",
       "4           1.158400    1.061683          0.038559          -0.441314   \n",
       "..               ...         ...               ...                ...   \n",
       "280         1.379052    1.318647          1.788959           0.590982   \n",
       "281        -0.801342   -0.734135         -1.411527          -1.132969   \n",
       "282         1.164206    1.153086          0.656347           0.537955   \n",
       "283         0.423859    0.123505         -0.000053           1.089550   \n",
       "284        -0.585916   -0.627382         -1.597721          -0.287420   \n",
       "\n",
       "     concavity_worst  concave points_worst  symmetry_worst  \\\n",
       "0           1.847250              2.066432        2.260107   \n",
       "1          -0.312301              0.878026       -0.387663   \n",
       "2           0.646479              1.731164        0.846819   \n",
       "3           1.732453              1.948190        5.173941   \n",
       "4           0.415050              0.526294       -0.939818   \n",
       "..               ...                   ...             ...   \n",
       "280         1.220461              0.895987        0.339008   \n",
       "281        -1.112432             -0.665106        0.114426   \n",
       "282         0.560152              1.464745        0.813918   \n",
       "283         0.886174              0.686444       -0.359054   \n",
       "284         0.113824             -0.383720       -1.461934   \n",
       "\n",
       "     fractal_dimension_worst  \n",
       "0                   1.600139  \n",
       "1                   0.135065  \n",
       "2                   0.064459  \n",
       "3                   4.252768  \n",
       "4                  -0.465086  \n",
       "..                       ...  \n",
       "280                 0.536146  \n",
       "281                -0.950502  \n",
       "282                -0.411641  \n",
       "283                 0.982337  \n",
       "284                -0.735252  \n",
       "\n",
       "[285 rows x 30 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaled_inputs"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We now have a dataframe containing scaled values of all of our information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(285, 30)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaled_inputs.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train-Test Split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[     radius_mean  texture_mean  perimeter_mean  area_mean  smoothness_mean  \\\n",
       " 47     -0.381808     -0.175473       -0.362585  -0.443019         1.253985   \n",
       " 14     -0.226078      0.740672       -0.055201  -0.321487         1.057795   \n",
       " 72      0.738892      1.183668        0.775784   0.654942         0.621817   \n",
       " 130    -0.654335     -1.420967       -0.640924  -0.662167         0.585485   \n",
       " 73     -0.206612     -0.841128       -0.183076  -0.305357         0.156774   \n",
       " ..           ...           ...             ...        ...              ...   \n",
       " 229    -0.476358      0.675730       -0.391629  -0.530345         0.745344   \n",
       " 203    -0.203831      1.005078       -0.137493  -0.267257         2.452925   \n",
       " 159    -1.013070     -1.497506       -1.060047  -0.909681        -1.699766   \n",
       " 65      0.065916      1.049146        0.098088  -0.071192         1.355713   \n",
       " 36     -0.081471      0.534249       -0.053991  -0.169363        -0.022704   \n",
       " \n",
       "      compactness_mean  concavity_mean  concave points_mean  symmetry_mean  \\\n",
       " 47           0.182713        0.239045             0.447845       0.937059   \n",
       " 14           2.054047        1.323218             0.621965       0.733944   \n",
       " 72           1.238202        0.799161             0.601376       0.245091   \n",
       " 130         -0.310847       -0.891404            -0.685329       0.083287   \n",
       " 73           0.269055       -0.298354            -0.129418      -0.667205   \n",
       " ..                ...             ...                  ...            ...   \n",
       " 229          1.183577        0.802767             0.326089       0.919845   \n",
       " 203          1.128952        0.638098             0.914536       1.360501   \n",
       " 159         -1.331271       -1.197424            -1.250442      -1.424583   \n",
       " 65           0.619710        0.288326             0.877171       0.334599   \n",
       " 36          -0.051645        0.350828             0.005048       0.100501   \n",
       " \n",
       "      fractal_dimension_mean  ...  radius_worst  texture_worst  \\\n",
       " 47                 0.632782  ...     -0.269639       0.289016   \n",
       " 14                 1.834926  ...     -0.398772       0.925533   \n",
       " 72                 0.247565  ...      1.273908       1.209301   \n",
       " 130                0.226311  ...     -0.739765      -1.300711   \n",
       " 73                 0.352503  ...     -0.088045      -0.822539   \n",
       " ..                      ...  ...           ...            ...   \n",
       " 229                1.266398  ...     -0.364471       0.633927   \n",
       " 203                1.488231  ...      0.442612       2.468226   \n",
       " 159               -0.740718  ...     -0.937500      -1.239567   \n",
       " 65                 0.469397  ...      0.061265       1.141887   \n",
       " 36                -0.233293  ...     -0.225249       0.666850   \n",
       " \n",
       "      perimeter_worst  area_worst  smoothness_worst  compactness_worst  \\\n",
       " 47         -0.275841   -0.344894          1.806120           0.778305   \n",
       " 14         -0.101642   -0.451302          1.226943           2.829639   \n",
       " 72          1.140980    1.244490          0.943790           2.638858   \n",
       " 130        -0.607400   -0.714302          0.265939          -0.132951   \n",
       " 73         -0.058092   -0.253491          0.197296           0.418644   \n",
       " ..               ...         ...               ...                ...   \n",
       " 229        -0.203258   -0.436987          1.767508           1.456704   \n",
       " 203         0.470313    0.333905          3.693806           1.379469   \n",
       " 159        -0.993832   -0.843991         -0.832351          -1.144842   \n",
       " 65          0.066751   -0.059129          1.214073           0.346021   \n",
       " 36          0.113204   -0.275566          0.347453           0.819804   \n",
       " \n",
       "      concavity_worst  concave points_worst  symmetry_worst  \\\n",
       " 47          0.876990              1.219281        1.257359   \n",
       " 14          1.766433              1.398889        0.822501   \n",
       " 72          1.593320              0.936398        0.417682   \n",
       " 130        -0.966411             -0.680523        0.640833   \n",
       " 73         -0.145616              0.164084       -0.617966   \n",
       " ..               ...                   ...             ...   \n",
       " 229         1.462911              1.053144        0.552145   \n",
       " 203         0.711684              1.107026        2.018360   \n",
       " 159        -1.336560             -1.314240       -0.404828   \n",
       " 65         -0.033116              0.509829        0.429126   \n",
       " 36          0.959644              0.259875        0.815349   \n",
       " \n",
       "      fractal_dimension_worst  \n",
       " 47                  1.551108  \n",
       " 14                  2.786713  \n",
       " 72                  2.335619  \n",
       " 130                 0.301283  \n",
       " 73                  0.820532  \n",
       " ..                       ...  \n",
       " 229                 1.864912  \n",
       " 203                 1.095110  \n",
       " 159                -0.461654  \n",
       " 65                  0.139478  \n",
       " 36                  0.742080  \n",
       " \n",
       " [213 rows x 30 columns],\n",
       "      radius_mean  texture_mean  perimeter_mean  area_mean  smoothness_mean  \\\n",
       " 186     1.047571     -0.194028        0.953276   0.965308        -0.920092   \n",
       " 253     0.766701     -0.541931        0.727377   0.651604         0.164040   \n",
       " 18      1.464705      0.633981        1.413141   1.574359        -0.016891   \n",
       " 147     0.113191     -0.149961        0.115837  -0.012234        -1.247076   \n",
       " 76     -0.281696     -1.966015       -0.284730  -0.374605         2.220403   \n",
       " ..           ...           ...             ...        ...              ...   \n",
       " 146    -0.762790     -0.657899       -0.644555  -0.728356         0.767143   \n",
       " 157     0.638780      0.010075        0.541817   0.518114        -1.750630   \n",
       " 242    -0.901835     -0.284483       -0.848670  -0.846829        -0.190556   \n",
       " 284    -0.459673     -0.862002       -0.439229  -0.493078        -1.479597   \n",
       " 194     0.088163      0.879833        0.219105  -0.062571         0.425627   \n",
       " \n",
       "      compactness_mean  concavity_mean  concave points_mean  symmetry_mean  \\\n",
       " 186         -0.494280       -0.252679             0.059953      -0.808353   \n",
       " 253         -0.152083        0.287124             0.705339      -0.147369   \n",
       " 18          -0.176753        0.543142             0.996385      -0.942615   \n",
       " 147          0.069939       -0.146786            -0.512481      -0.384910   \n",
       " 76          -0.141511       -0.407973             0.248561       1.883781   \n",
       " ..                ...             ...                  ...            ...   \n",
       " 146          1.009131        0.759496             0.466910       2.830503   \n",
       " 157         -0.713660       -0.615553            -0.713544      -0.040647   \n",
       " 242          0.348349        0.626078            -0.692447       0.682304   \n",
       " 284         -0.298336        0.105627            -0.556201      -1.459009   \n",
       " 194          1.502514        0.805171             0.838788      -0.409008   \n",
       " \n",
       "      fractal_dimension_mean  ...  radius_worst  texture_worst  \\\n",
       " 186               -1.163128  ...      0.868348       0.039739   \n",
       " 253               -0.913401  ...      0.573763      -0.159369   \n",
       " 18                -1.202979  ...      2.080991       0.748374   \n",
       " 147                0.255535  ...     -0.152612      -0.099793   \n",
       " 76                 0.452128  ...     -0.590454      -2.134768   \n",
       " ..                      ...  ...           ...            ...   \n",
       " 146                1.421814  ...     -0.659056       0.042875   \n",
       " 157               -1.371677  ...      0.244877       0.307829   \n",
       " 242                1.817658  ...     -0.893110       0.290583   \n",
       " 284               -0.485677  ...     -0.626773      -1.005969   \n",
       " 194                0.493307  ...     -0.186913       0.262363   \n",
       " \n",
       "      perimeter_worst  area_worst  smoothness_worst  compactness_worst  \\\n",
       " 186         0.780968    0.777125         -0.562068          -0.213644   \n",
       " 253         0.539992    0.452902          0.218747          -0.236699   \n",
       " 18          2.162949    2.481022          0.630606           0.192704   \n",
       " 147        -0.150998   -0.258147         -1.578845          -0.169839   \n",
       " 76         -0.607981   -0.610309          0.368904          -0.828064   \n",
       " ..               ...         ...               ...                ...   \n",
       " 146        -0.591432   -0.634108          0.085751           0.735653   \n",
       " 157         0.232240    0.125230         -2.091952          -0.637283   \n",
       " 242        -0.729920   -0.838990         -0.077276           1.171396   \n",
       " 284        -0.585916   -0.627382         -1.597721          -0.287420   \n",
       " 194         0.182884   -0.301262         -0.210272           1.056120   \n",
       " \n",
       "      concavity_worst  concave points_worst  symmetry_worst  \\\n",
       " 186         0.202906              0.445470        0.264624   \n",
       " 253         0.129436              0.873536        0.167353   \n",
       " 18          1.045052              1.668301       -0.361915   \n",
       " 147        -0.273729             -0.647894       -0.241757   \n",
       " 76         -1.029595             -0.797268       -0.444881   \n",
       " ..               ...                   ...             ...   \n",
       " 146         0.646479              0.885510        3.938029   \n",
       " 157        -0.557506             -0.643254       -0.706654   \n",
       " 242         1.992812             -0.082877        0.410530   \n",
       " 284         0.113824             -0.383720       -1.461934   \n",
       " 194         0.685510              0.678960       -0.030050   \n",
       " \n",
       "      fractal_dimension_worst  \n",
       " 186                -0.827922  \n",
       " 253                -0.251797  \n",
       " 18                 -0.495976  \n",
       " 147                 0.290006  \n",
       " 76                 -0.703872  \n",
       " ..                       ...  \n",
       " 146                 0.820532  \n",
       " 157                -1.301571  \n",
       " 242                 2.129684  \n",
       " 284                -0.735252  \n",
       " 194                 0.036511  \n",
       " \n",
       " [72 rows x 30 columns],\n",
       " array([1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0,\n",
       "        0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0,\n",
       "        0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1,\n",
       "        1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1,\n",
       "        0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0,\n",
       "        1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0,\n",
       "        1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0,\n",
       "        0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1,\n",
       "        0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1,\n",
       "        0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1]),\n",
       " array([1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0,\n",
       "        1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0,\n",
       "        1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1,\n",
       "        0, 1, 0, 0, 0, 1])]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_test_split(scaled_inputs, targets)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train, x_test, y_train, y_test = train_test_split(scaled_inputs, targets)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(213, 30) (213,)\n"
     ]
    }
   ],
   "source": [
    "print(x_train.shape, y_train.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This tells us that the inputs contain 213 observations along 30 features, while the target vector has a length of 213."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(72, 30) (72,)\n"
     ]
    }
   ],
   "source": [
    "print(x_test.shape, y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression w/ Sklearn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn import metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "reg = LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
       "                   multi_class='auto', n_jobs=None, penalty='l2',\n",
       "                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9812206572769953"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg.score(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9861111111111112"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg.score(x_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We conclude that our model, when predicting on the testing set, has an accuracy of 98%.\n",
    "\n",
    "Let's check the accuracy by getting the the probability of the output being a 1 or 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[3.54523522e-10, 1.00000000e+00],\n",
       "       [3.62913847e-01, 6.37086153e-01],\n",
       "       [9.97778666e-01, 2.22133440e-03],\n",
       "       [6.92743135e-03, 9.93072569e-01],\n",
       "       [3.67154087e-01, 6.32845913e-01],\n",
       "       [5.94522572e-06, 9.99994055e-01],\n",
       "       [1.33226763e-15, 1.00000000e+00],\n",
       "       [9.99973781e-01, 2.62189431e-05],\n",
       "       [4.64838834e-07, 9.99999535e-01],\n",
       "       [8.28773704e-01, 1.71226296e-01],\n",
       "       [9.98434164e-01, 1.56583605e-03],\n",
       "       [1.79714606e-07, 9.99999820e-01],\n",
       "       [9.66099881e-01, 3.39001192e-02],\n",
       "       [9.84364717e-01, 1.56352830e-02],\n",
       "       [9.26288773e-05, 9.99907371e-01],\n",
       "       [7.16115317e-05, 9.99928388e-01],\n",
       "       [9.99198624e-01, 8.01375605e-04],\n",
       "       [9.96134568e-01, 3.86543218e-03],\n",
       "       [5.64991456e-05, 9.99943501e-01],\n",
       "       [4.20370644e-04, 9.99579629e-01],\n",
       "       [4.83199728e-08, 9.99999952e-01],\n",
       "       [1.12505548e-05, 9.99988749e-01],\n",
       "       [5.61051847e-04, 9.99438948e-01],\n",
       "       [9.96740917e-01, 3.25908260e-03],\n",
       "       [9.98378917e-01, 1.62108321e-03],\n",
       "       [3.45725948e-07, 9.99999654e-01],\n",
       "       [7.35145078e-09, 9.99999993e-01],\n",
       "       [2.18417107e-09, 9.99999998e-01],\n",
       "       [8.22867952e-01, 1.77132048e-01],\n",
       "       [9.99790274e-01, 2.09726187e-04],\n",
       "       [9.99961672e-01, 3.83277267e-05],\n",
       "       [4.26967737e-06, 9.99995730e-01],\n",
       "       [9.99997148e-01, 2.85227084e-06],\n",
       "       [8.42032894e-02, 9.15796711e-01],\n",
       "       [9.96637218e-01, 3.36278150e-03],\n",
       "       [2.68700798e-03, 9.97312992e-01],\n",
       "       [1.98393329e-03, 9.98016067e-01],\n",
       "       [4.60088484e-03, 9.95399115e-01],\n",
       "       [2.29302232e-06, 9.99997707e-01],\n",
       "       [9.99177537e-01, 8.22462743e-04],\n",
       "       [9.52189973e-01, 4.78100270e-02],\n",
       "       [8.04026570e-04, 9.99195973e-01],\n",
       "       [9.64314162e-01, 3.56858376e-02],\n",
       "       [9.90581751e-01, 9.41824874e-03],\n",
       "       [2.18828482e-01, 7.81171518e-01],\n",
       "       [7.15092922e-02, 9.28490708e-01],\n",
       "       [9.98556161e-01, 1.44383924e-03],\n",
       "       [9.70022409e-01, 2.99775911e-02],\n",
       "       [8.63264625e-08, 9.99999914e-01],\n",
       "       [9.99441809e-01, 5.58190855e-04],\n",
       "       [9.96114246e-01, 3.88575380e-03],\n",
       "       [8.41239003e-01, 1.58760997e-01],\n",
       "       [9.84920895e-01, 1.50791046e-02],\n",
       "       [7.51207996e-09, 9.99999992e-01],\n",
       "       [9.84267998e-01, 1.57320015e-02],\n",
       "       [1.83221401e-03, 9.98167786e-01],\n",
       "       [9.63894150e-01, 3.61058496e-02],\n",
       "       [9.46533207e-01, 5.34667929e-02],\n",
       "       [1.34472433e-11, 1.00000000e+00],\n",
       "       [9.34576893e-01, 6.54231072e-02],\n",
       "       [9.80847262e-01, 1.91527383e-02],\n",
       "       [9.93254831e-01, 6.74516873e-03],\n",
       "       [9.99908952e-01, 9.10476994e-05],\n",
       "       [9.96609664e-01, 3.39033585e-03],\n",
       "       [9.99752254e-01, 2.47746148e-04],\n",
       "       [8.29168200e-01, 1.70831800e-01],\n",
       "       [9.11122783e-08, 9.99999909e-01],\n",
       "       [6.92995360e-03, 9.93070046e-01],\n",
       "       [3.08574489e-02, 9.69142551e-01],\n",
       "       [2.08763817e-06, 9.99997912e-01],\n",
       "       [9.99999837e-01, 1.63495035e-07],\n",
       "       [1.27265093e-02, 9.87273491e-01]])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predicted_proba = reg.predict_proba(x_test)\n",
    "predicted_proba"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(72, 2)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predicted_proba.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can slice out all the values from the second column. This will give us the probabilities of malignant or benign."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.00000000e+00, 6.37086153e-01, 2.22133440e-03, 9.93072569e-01,\n",
       "       6.32845913e-01, 9.99994055e-01, 1.00000000e+00, 2.62189431e-05,\n",
       "       9.99999535e-01, 1.71226296e-01, 1.56583605e-03, 9.99999820e-01,\n",
       "       3.39001192e-02, 1.56352830e-02, 9.99907371e-01, 9.99928388e-01,\n",
       "       8.01375605e-04, 3.86543218e-03, 9.99943501e-01, 9.99579629e-01,\n",
       "       9.99999952e-01, 9.99988749e-01, 9.99438948e-01, 3.25908260e-03,\n",
       "       1.62108321e-03, 9.99999654e-01, 9.99999993e-01, 9.99999998e-01,\n",
       "       1.77132048e-01, 2.09726187e-04, 3.83277267e-05, 9.99995730e-01,\n",
       "       2.85227084e-06, 9.15796711e-01, 3.36278150e-03, 9.97312992e-01,\n",
       "       9.98016067e-01, 9.95399115e-01, 9.99997707e-01, 8.22462743e-04,\n",
       "       4.78100270e-02, 9.99195973e-01, 3.56858376e-02, 9.41824874e-03,\n",
       "       7.81171518e-01, 9.28490708e-01, 1.44383924e-03, 2.99775911e-02,\n",
       "       9.99999914e-01, 5.58190855e-04, 3.88575380e-03, 1.58760997e-01,\n",
       "       1.50791046e-02, 9.99999992e-01, 1.57320015e-02, 9.98167786e-01,\n",
       "       3.61058496e-02, 5.34667929e-02, 1.00000000e+00, 6.54231072e-02,\n",
       "       1.91527383e-02, 6.74516873e-03, 9.10476994e-05, 3.39033585e-03,\n",
       "       2.47746148e-04, 1.70831800e-01, 9.99999909e-01, 9.93070046e-01,\n",
       "       9.69142551e-01, 9.99997912e-01, 1.63495035e-07, 9.87273491e-01])"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predicted_proba[:,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('model', 'wb') as file:\n",
    "    pickle.dump(reg, file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('scaler', 'wb') as file:\n",
    "    pickle.dump(disease_scaler, file)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In order to make sense of the module file that is made separately from this notebook, I will display a dataframe that is essential to understanding what exactly is going on.\n",
    "\n",
    "In the module, we have a \"predicted_outputs\" method that contains two essential lines of code. These two lines append two columns to our scaled inputs dataframe, which are the probability of being 0 or 1, and the final prediction for that row of data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "preprocessed_data['Probability'] = reg.predict_proba(scaled_inputs)[:,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "preprocessed_data ['Prediction'] = reg.predict(scaled_inputs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>radius_mean</th>\n",
       "      <th>texture_mean</th>\n",
       "      <th>perimeter_mean</th>\n",
       "      <th>area_mean</th>\n",
       "      <th>smoothness_mean</th>\n",
       "      <th>compactness_mean</th>\n",
       "      <th>concavity_mean</th>\n",
       "      <th>concave points_mean</th>\n",
       "      <th>symmetry_mean</th>\n",
       "      <th>fractal_dimension_mean</th>\n",
       "      <th>...</th>\n",
       "      <th>perimeter_worst</th>\n",
       "      <th>area_worst</th>\n",
       "      <th>smoothness_worst</th>\n",
       "      <th>compactness_worst</th>\n",
       "      <th>concavity_worst</th>\n",
       "      <th>concave points_worst</th>\n",
       "      <th>symmetry_worst</th>\n",
       "      <th>fractal_dimension_worst</th>\n",
       "      <th>Probability</th>\n",
       "      <th>Prediction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17.99</td>\n",
       "      <td>10.38</td>\n",
       "      <td>122.80</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>0.11840</td>\n",
       "      <td>0.27760</td>\n",
       "      <td>0.30010</td>\n",
       "      <td>0.14710</td>\n",
       "      <td>0.2419</td>\n",
       "      <td>0.07871</td>\n",
       "      <td>...</td>\n",
       "      <td>184.60</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>0.16220</td>\n",
       "      <td>0.6656</td>\n",
       "      <td>0.71190</td>\n",
       "      <td>0.2654</td>\n",
       "      <td>0.4601</td>\n",
       "      <td>0.11890</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20.57</td>\n",
       "      <td>17.77</td>\n",
       "      <td>132.90</td>\n",
       "      <td>1326.0</td>\n",
       "      <td>0.08474</td>\n",
       "      <td>0.07864</td>\n",
       "      <td>0.08690</td>\n",
       "      <td>0.07017</td>\n",
       "      <td>0.1812</td>\n",
       "      <td>0.05667</td>\n",
       "      <td>...</td>\n",
       "      <td>158.80</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>0.12380</td>\n",
       "      <td>0.1866</td>\n",
       "      <td>0.24160</td>\n",
       "      <td>0.1860</td>\n",
       "      <td>0.2750</td>\n",
       "      <td>0.08902</td>\n",
       "      <td>0.999952</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.69</td>\n",
       "      <td>21.25</td>\n",
       "      <td>130.00</td>\n",
       "      <td>1203.0</td>\n",
       "      <td>0.10960</td>\n",
       "      <td>0.15990</td>\n",
       "      <td>0.19740</td>\n",
       "      <td>0.12790</td>\n",
       "      <td>0.2069</td>\n",
       "      <td>0.05999</td>\n",
       "      <td>...</td>\n",
       "      <td>152.50</td>\n",
       "      <td>1709.0</td>\n",
       "      <td>0.14440</td>\n",
       "      <td>0.4245</td>\n",
       "      <td>0.45040</td>\n",
       "      <td>0.2430</td>\n",
       "      <td>0.3613</td>\n",
       "      <td>0.08758</td>\n",
       "      <td>0.999999</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.42</td>\n",
       "      <td>20.38</td>\n",
       "      <td>77.58</td>\n",
       "      <td>386.1</td>\n",
       "      <td>0.14250</td>\n",
       "      <td>0.28390</td>\n",
       "      <td>0.24140</td>\n",
       "      <td>0.10520</td>\n",
       "      <td>0.2597</td>\n",
       "      <td>0.09744</td>\n",
       "      <td>...</td>\n",
       "      <td>98.87</td>\n",
       "      <td>567.7</td>\n",
       "      <td>0.20980</td>\n",
       "      <td>0.8663</td>\n",
       "      <td>0.68690</td>\n",
       "      <td>0.2575</td>\n",
       "      <td>0.6638</td>\n",
       "      <td>0.17300</td>\n",
       "      <td>0.999435</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20.29</td>\n",
       "      <td>14.34</td>\n",
       "      <td>135.10</td>\n",
       "      <td>1297.0</td>\n",
       "      <td>0.10030</td>\n",
       "      <td>0.13280</td>\n",
       "      <td>0.19800</td>\n",
       "      <td>0.10430</td>\n",
       "      <td>0.1809</td>\n",
       "      <td>0.05883</td>\n",
       "      <td>...</td>\n",
       "      <td>152.20</td>\n",
       "      <td>1575.0</td>\n",
       "      <td>0.13740</td>\n",
       "      <td>0.2050</td>\n",
       "      <td>0.40000</td>\n",
       "      <td>0.1625</td>\n",
       "      <td>0.2364</td>\n",
       "      <td>0.07678</td>\n",
       "      <td>0.999907</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>280</th>\n",
       "      <td>19.16</td>\n",
       "      <td>26.60</td>\n",
       "      <td>126.20</td>\n",
       "      <td>1138.0</td>\n",
       "      <td>0.10200</td>\n",
       "      <td>0.14530</td>\n",
       "      <td>0.19210</td>\n",
       "      <td>0.09664</td>\n",
       "      <td>0.1902</td>\n",
       "      <td>0.06220</td>\n",
       "      <td>...</td>\n",
       "      <td>159.80</td>\n",
       "      <td>1724.0</td>\n",
       "      <td>0.17820</td>\n",
       "      <td>0.3841</td>\n",
       "      <td>0.57540</td>\n",
       "      <td>0.1872</td>\n",
       "      <td>0.3258</td>\n",
       "      <td>0.09720</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>281</th>\n",
       "      <td>11.74</td>\n",
       "      <td>14.02</td>\n",
       "      <td>74.24</td>\n",
       "      <td>427.3</td>\n",
       "      <td>0.07813</td>\n",
       "      <td>0.04340</td>\n",
       "      <td>0.02245</td>\n",
       "      <td>0.02763</td>\n",
       "      <td>0.2101</td>\n",
       "      <td>0.06113</td>\n",
       "      <td>...</td>\n",
       "      <td>84.70</td>\n",
       "      <td>533.7</td>\n",
       "      <td>0.10360</td>\n",
       "      <td>0.0850</td>\n",
       "      <td>0.06735</td>\n",
       "      <td>0.0829</td>\n",
       "      <td>0.3101</td>\n",
       "      <td>0.06688</td>\n",
       "      <td>0.002147</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>282</th>\n",
       "      <td>19.40</td>\n",
       "      <td>18.18</td>\n",
       "      <td>127.20</td>\n",
       "      <td>1145.0</td>\n",
       "      <td>0.10370</td>\n",
       "      <td>0.14420</td>\n",
       "      <td>0.16260</td>\n",
       "      <td>0.09464</td>\n",
       "      <td>0.1893</td>\n",
       "      <td>0.05892</td>\n",
       "      <td>...</td>\n",
       "      <td>152.40</td>\n",
       "      <td>1628.0</td>\n",
       "      <td>0.15180</td>\n",
       "      <td>0.3749</td>\n",
       "      <td>0.43160</td>\n",
       "      <td>0.2252</td>\n",
       "      <td>0.3590</td>\n",
       "      <td>0.07787</td>\n",
       "      <td>0.999989</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>283</th>\n",
       "      <td>16.24</td>\n",
       "      <td>18.77</td>\n",
       "      <td>108.80</td>\n",
       "      <td>805.1</td>\n",
       "      <td>0.10660</td>\n",
       "      <td>0.18020</td>\n",
       "      <td>0.19480</td>\n",
       "      <td>0.09052</td>\n",
       "      <td>0.1876</td>\n",
       "      <td>0.06684</td>\n",
       "      <td>...</td>\n",
       "      <td>126.90</td>\n",
       "      <td>1031.0</td>\n",
       "      <td>0.13650</td>\n",
       "      <td>0.4706</td>\n",
       "      <td>0.50260</td>\n",
       "      <td>0.1732</td>\n",
       "      <td>0.2770</td>\n",
       "      <td>0.10630</td>\n",
       "      <td>0.976991</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>284</th>\n",
       "      <td>12.89</td>\n",
       "      <td>15.70</td>\n",
       "      <td>84.08</td>\n",
       "      <td>516.6</td>\n",
       "      <td>0.07818</td>\n",
       "      <td>0.09580</td>\n",
       "      <td>0.11150</td>\n",
       "      <td>0.03390</td>\n",
       "      <td>0.1432</td>\n",
       "      <td>0.05935</td>\n",
       "      <td>...</td>\n",
       "      <td>92.12</td>\n",
       "      <td>595.6</td>\n",
       "      <td>0.09926</td>\n",
       "      <td>0.2317</td>\n",
       "      <td>0.33440</td>\n",
       "      <td>0.1017</td>\n",
       "      <td>0.1999</td>\n",
       "      <td>0.07127</td>\n",
       "      <td>0.001063</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>285 rows Ã— 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     radius_mean  texture_mean  perimeter_mean  area_mean  smoothness_mean  \\\n",
       "0          17.99         10.38          122.80     1001.0          0.11840   \n",
       "1          20.57         17.77          132.90     1326.0          0.08474   \n",
       "2          19.69         21.25          130.00     1203.0          0.10960   \n",
       "3          11.42         20.38           77.58      386.1          0.14250   \n",
       "4          20.29         14.34          135.10     1297.0          0.10030   \n",
       "..           ...           ...             ...        ...              ...   \n",
       "280        19.16         26.60          126.20     1138.0          0.10200   \n",
       "281        11.74         14.02           74.24      427.3          0.07813   \n",
       "282        19.40         18.18          127.20     1145.0          0.10370   \n",
       "283        16.24         18.77          108.80      805.1          0.10660   \n",
       "284        12.89         15.70           84.08      516.6          0.07818   \n",
       "\n",
       "     compactness_mean  concavity_mean  concave points_mean  symmetry_mean  \\\n",
       "0             0.27760         0.30010              0.14710         0.2419   \n",
       "1             0.07864         0.08690              0.07017         0.1812   \n",
       "2             0.15990         0.19740              0.12790         0.2069   \n",
       "3             0.28390         0.24140              0.10520         0.2597   \n",
       "4             0.13280         0.19800              0.10430         0.1809   \n",
       "..                ...             ...                  ...            ...   \n",
       "280           0.14530         0.19210              0.09664         0.1902   \n",
       "281           0.04340         0.02245              0.02763         0.2101   \n",
       "282           0.14420         0.16260              0.09464         0.1893   \n",
       "283           0.18020         0.19480              0.09052         0.1876   \n",
       "284           0.09580         0.11150              0.03390         0.1432   \n",
       "\n",
       "     fractal_dimension_mean  ...  perimeter_worst  area_worst  \\\n",
       "0                   0.07871  ...           184.60      2019.0   \n",
       "1                   0.05667  ...           158.80      1956.0   \n",
       "2                   0.05999  ...           152.50      1709.0   \n",
       "3                   0.09744  ...            98.87       567.7   \n",
       "4                   0.05883  ...           152.20      1575.0   \n",
       "..                      ...  ...              ...         ...   \n",
       "280                 0.06220  ...           159.80      1724.0   \n",
       "281                 0.06113  ...            84.70       533.7   \n",
       "282                 0.05892  ...           152.40      1628.0   \n",
       "283                 0.06684  ...           126.90      1031.0   \n",
       "284                 0.05935  ...            92.12       595.6   \n",
       "\n",
       "     smoothness_worst  compactness_worst  concavity_worst  \\\n",
       "0             0.16220             0.6656          0.71190   \n",
       "1             0.12380             0.1866          0.24160   \n",
       "2             0.14440             0.4245          0.45040   \n",
       "3             0.20980             0.8663          0.68690   \n",
       "4             0.13740             0.2050          0.40000   \n",
       "..                ...                ...              ...   \n",
       "280           0.17820             0.3841          0.57540   \n",
       "281           0.10360             0.0850          0.06735   \n",
       "282           0.15180             0.3749          0.43160   \n",
       "283           0.13650             0.4706          0.50260   \n",
       "284           0.09926             0.2317          0.33440   \n",
       "\n",
       "     concave points_worst  symmetry_worst  fractal_dimension_worst  \\\n",
       "0                  0.2654          0.4601                  0.11890   \n",
       "1                  0.1860          0.2750                  0.08902   \n",
       "2                  0.2430          0.3613                  0.08758   \n",
       "3                  0.2575          0.6638                  0.17300   \n",
       "4                  0.1625          0.2364                  0.07678   \n",
       "..                    ...             ...                      ...   \n",
       "280                0.1872          0.3258                  0.09720   \n",
       "281                0.0829          0.3101                  0.06688   \n",
       "282                0.2252          0.3590                  0.07787   \n",
       "283                0.1732          0.2770                  0.10630   \n",
       "284                0.1017          0.1999                  0.07127   \n",
       "\n",
       "     Probability  Prediction  \n",
       "0       1.000000           1  \n",
       "1       0.999952           1  \n",
       "2       0.999999           1  \n",
       "3       0.999435           1  \n",
       "4       0.999907           1  \n",
       "..           ...         ...  \n",
       "280     1.000000           1  \n",
       "281     0.002147           0  \n",
       "282     0.999989           1  \n",
       "283     0.976991           1  \n",
       "284     0.001063           0  \n",
       "\n",
       "[285 rows x 32 columns]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preprocessed_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "#disease_scaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "#scaled_inputs.shape"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
